import numpy as np

def gram_schmidt(A):
    """ Проведение процесса Грама-Шмидта для QR-разложения """
    n, m = A.shape
    Q = np.zeros((n, m))
    R = np.zeros((m, m))

    for j in range(m):
        v = A[:, j]
        for i in range(j):
            R[i, j] = np.dot(Q[:, i], A[:, j])
            v = v - R[i, j] * Q[:, i]
        R[j, j] = np.linalg.norm(v)
        Q[:, j] = v / R[j, j]

        # Выводим текущие значения Q и R
        print(f"Step {j+1}:\nQ:\n{np.round(Q).astype(int)}\nR:\n{np.round(R).astype(int)}\n")

    return Q, R

def back_substitution(U, y):
    """ Обратная подстановка для решения Ux = y """
    n = len(y)
    x = np.zeros_like(y)

    for i in range(n-1, -1, -1):
        x[i] = (y[i] - np.dot(U[i, i+1:], x[i+1:])) / U[i, i]

    return np.round(x).astype(int)

# Определение матрицы A и вектора b
A = np.array([[1, 1, 1], [5, 4, 3], [1, 2, 0]])
b = np.array([-1, -2, -4])

# Вывод изначальной матрицы A и вектора b
print("Исходная матрица A:\n", A)
print("Исходный вектор b:\n", b)

# Выполнение QR-разложения без использования numpy.linalg.qr
Q, R = gram_schmidt(A)

# Вычисление Q^T * b
Qb = np.dot(Q.T, b)

# Решение уравнения Rx = Q^Tb для x с помощью обратной подстановки
x = back_substitution(R, Qb)

# Вывод решения x
print("Решение x:")
print(x)
